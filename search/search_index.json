{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to the goTorrent Documentation\n\n\ngoTorrent is a torrenting remote client built with Go (Golang) with websocket API that comes with a React web frontend.\n\n\nIf you have any issues using this software please look at the open tickets in github, and open a ticket if needed.\n\n\nSupported Platforms:\n\n\n\n\nWindows\n\n\nLinux\n\n\nMacOS - (untested as I do not have a Mac)\n\n\n\n\nSupported Arch:\n\n\n\n\nx64\n\n\n\n\nFeatures:\n\n\n\n\nResponsive React based WebUI\n\n\nDownload torrents from File upload or Magnet Link\n\n\nStart/Stop/Delete Multiple Torrents\n\n\nAdd RSS feeds and automatically download new torrents from feed\n\n\nDetailed information for each torrent\n\n\nAutomatic stop after seeding ratio reached\n\n\nPushbullet notification on torrent complete\n\n\nAutomatic move of completed torrent to new directory (leave symlink behind for seeding)\n\n\nSymlinks don't work on Windows yet, have to copy file for now",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-the-gotorrent-documentation",
            "text": "goTorrent is a torrenting remote client built with Go (Golang) with websocket API that comes with a React web frontend.  If you have any issues using this software please look at the open tickets in github, and open a ticket if needed.",
            "title": "Welcome to the goTorrent Documentation"
        },
        {
            "location": "/#supported-platforms",
            "text": "Windows  Linux  MacOS - (untested as I do not have a Mac)",
            "title": "Supported Platforms:"
        },
        {
            "location": "/#supported-arch",
            "text": "x64",
            "title": "Supported Arch:"
        },
        {
            "location": "/#features",
            "text": "Responsive React based WebUI  Download torrents from File upload or Magnet Link  Start/Stop/Delete Multiple Torrents  Add RSS feeds and automatically download new torrents from feed  Detailed information for each torrent  Automatic stop after seeding ratio reached  Pushbullet notification on torrent complete  Automatic move of completed torrent to new directory (leave symlink behind for seeding)  Symlinks don't work on Windows yet, have to copy file for now",
            "title": "Features:"
        },
        {
            "location": "/Roadmap/",
            "text": "Early-Mid 2018\n\n\n\n\n\n\n Ability to modify storage path of torrent after it has been added\n\n\n\n\n\n\n Backend to frontend notification messages\n\n\n\n\n\n\n Global Rate Limiting for Upload/Download Speed\n\n\n\n\n\n\n Add torrents from watch folder (cron job every 5 minutes)\n\n\n\n\n\n\n Authentication from client to server (done via JWT, will add functionality for 3rd party clients later)\n\n\n\n\n\n\n Reverse Proxy Support with SSL upgrade added (with provided config for nginx)\n\n\n\n\n\n\n Mostly generated client config from toml.config on first run\n\n\n\n\n\n\n Ability to view TOML settings from WebUI (and perhaps change a few as well)\n\n\n\n\n\n\n Stability/bug fixing/Optimization rewrite of some of the core structures of the WebUI and base server\n\n\n\n\n\n\n Ability to set priority for individual files (needs more testing...)\n\n\n\n\n\n\n Unit testing completed for a large portion of the package\n\n\n\n\n\n\n Put the \"Move torrent after download\" into own goroutine with checks so the WebUI doesn't freeze when moving torrent\n\n\n\n\n\n\nLate 2018\n\n\n\n\n\n\n Define the websocket API for users to write their own clients/extensions\n\n\n\n\n\n\n React-native Android app (I don't own any Mac products so there will be no iPhone version)",
            "title": "Roadmap"
        },
        {
            "location": "/Roadmap/#early-mid-2018",
            "text": "Ability to modify storage path of torrent after it has been added     Backend to frontend notification messages     Global Rate Limiting for Upload/Download Speed     Add torrents from watch folder (cron job every 5 minutes)     Authentication from client to server (done via JWT, will add functionality for 3rd party clients later)     Reverse Proxy Support with SSL upgrade added (with provided config for nginx)     Mostly generated client config from toml.config on first run     Ability to view TOML settings from WebUI (and perhaps change a few as well)     Stability/bug fixing/Optimization rewrite of some of the core structures of the WebUI and base server     Ability to set priority for individual files (needs more testing...)     Unit testing completed for a large portion of the package     Put the \"Move torrent after download\" into own goroutine with checks so the WebUI doesn't freeze when moving torrent",
            "title": "Early-Mid 2018"
        },
        {
            "location": "/Roadmap/#late-2018",
            "text": "Define the websocket API for users to write their own clients/extensions     React-native Android app (I don't own any Mac products so there will be no iPhone version)",
            "title": "Late 2018"
        },
        {
            "location": "/downloading/",
            "text": "Download Precompiled Binary (Recommended)\n\n\nYou can download the latest releases from the github releases page: \nReleases\n\n\nRunning From Source\n\n\nIf you wish to run goTorrent from go source:\n\n\n\n\n\n\nFirst install the go binary release from \nGo Downloads\n. Version 1.9+ is required for goTorrent.\n\n\n\n\n\n\nFollow the directions on the website to install Go correctly\n\n\n\n\n\n\ngo get github.com/deranjer/goTorrent\n\n\n\n\n\n\nThen \ncd\n into that folder in your go source path and get all of the dependencies: \ngo get ./...\n\n\n\n\n\n\nThen run \ngo run main.go\n and you should be up and running once it builds.",
            "title": "Downloading"
        },
        {
            "location": "/downloading/#download-precompiled-binary-recommended",
            "text": "You can download the latest releases from the github releases page:  Releases",
            "title": "Download Precompiled Binary (Recommended)"
        },
        {
            "location": "/downloading/#running-from-source",
            "text": "If you wish to run goTorrent from go source:    First install the go binary release from  Go Downloads . Version 1.9+ is required for goTorrent.    Follow the directions on the website to install Go correctly    go get github.com/deranjer/goTorrent    Then  cd  into that folder in your go source path and get all of the dependencies:  go get ./...    Then run  go run main.go  and you should be up and running once it builds.",
            "title": "Running From Source"
        },
        {
            "location": "/Install/installing/",
            "text": "Directions Video for Linux\n\n\nYou can watch a YouTube video of me setting it up on Linux, the directions are fairly similar for other OS's\n\n\n\n\nSimplified Directions\n\n\n\n\nExtract the download file\n\n\nEnter your settings into the config.toml file\n\n\nIf needed modify the \npublic/static/js/kickwebsocket-generated.js\n file to connect the frontend to the backend (not needed if using reverse proxy)\n\n\nMake goTorrent binary file executable (linux only)\n\n\nRun the goTorrent binary, connect via a web browser\n\n\n\n\nLinux Auto-Start\n\n\n\n\nchown the directory goTorrent is in to a new user called \"goTorrent\"\n\n\ncopy the systemd startup file from \ndist-specific-files\\Linux-systemd\\goTorrent.service\n to your systemd directory for services \n\n\nenable the service, then start the service.",
            "title": "General Info"
        },
        {
            "location": "/Install/installing/#directions-video-for-linux",
            "text": "You can watch a YouTube video of me setting it up on Linux, the directions are fairly similar for other OS's",
            "title": "Directions Video for Linux"
        },
        {
            "location": "/Install/installing/#simplified-directions",
            "text": "Extract the download file  Enter your settings into the config.toml file  If needed modify the  public/static/js/kickwebsocket-generated.js  file to connect the frontend to the backend (not needed if using reverse proxy)  Make goTorrent binary file executable (linux only)  Run the goTorrent binary, connect via a web browser",
            "title": "Simplified Directions"
        },
        {
            "location": "/Install/installing/#linux-auto-start",
            "text": "chown the directory goTorrent is in to a new user called \"goTorrent\"  copy the systemd startup file from  dist-specific-files\\Linux-systemd\\goTorrent.service  to your systemd directory for services   enable the service, then start the service.",
            "title": "Linux Auto-Start"
        },
        {
            "location": "/Install/linuxInstall/",
            "text": "Configuring the backend\n\n\nDownload the latest release from the releases tab, it will be in a tar.gz format.\n\n\nCreate a directory where goTorrent will run from\n\n\nsudo mkdir /opt/goTorrent\n\n\n\nPut the tar.gz release into the folder, and extract it.\n\n\ntar -zxvf goTorrent_release_64-git.tar.gz\n\n\n\nYou can then remove the tar.gz if you wish.  You should have something similar to the following files:\n\n\ndrwxr-xr-x 5 root root        9 Jan 21 14:56 .\ndrwxr-xr-x 5 root root        5 Jan 21 14:54 ..\n-rw-rw-rw- 1 root root     1086 Dec  1 01:42 LICENSE\n-rw-rw-rw- 1 root root       69 Dec  1 01:01 README.md\n-rw-rw-rw- 1 root root     4466 Jan 21 03:48 config.toml\ndrwxr-xr-x 3 root root        3 Jan 21 14:55 dist-specific-files\n-rw-rw-rw- 1 root root 12503552 Jan 21 03:53 goTorrent\ndrwxr-xr-x 3 root root        3 Jan 21 14:55 public\ndrwxr-xr-x 2 root root        3 Jan 21 14:55 templates\n\n\n\nThe \nconfig.toml\n file contains all of the settings for the server part of the application.  Most of the important settings are at the top of the file, so open it with your prefered text editor.\n\n\n[serverConfig]\n\n\nServerPort = \":8000\" #leave format as is it expects a string with colon\nServerAddr = \"\" #blank will bind to default IP address, usually fine to leave be\nLogLevel = \"Warn\" # Options = Debug, Info, Warn, Error, Fatal, Panic\nLogOutput = \"file\" #Options = file, stdout #file will print it to logs/server.log\n\nSeedRatioStop = 1.50 #automatically stops the torrent after it reaches this seeding ratio\n#Relative or absolute path accepted, the server will convert any relative path to an absolute path.\nDefaultMoveFolder = 'downloaded' #default path that a finished torrent is symlinked to after completion. Torrents added via RSS will default here\nTorrentWatchFolder = 'torrentUpload' #folder path that is watched for .torrent files and adds them automatically every 5 minutes\n\n#Limits your upload and download speed globally, all are averages and not burst protected (usually burst on start).\n#Low = ~.05MB/s, Medium = ~.5MB/s, High = ~1.5MB/s\nUploadRateLimit = \"Unlimited\"  #Options are \"Low\", \"Medium\", \"High\", \"Unlimited\" #Unlimited is default\nDownloadRateLimit = \"Unlimited\"\n\n\n\n[notifications]\n\n\nPushBulletToken = \"\" #add your pushbullet api token here to notify of torrent completion to pushbullet\n\n\n\nUsually you don't need to change anything in this file, goTorrent will use your default IP address and bind to it.  You can change the port if you wish.\n\n\nNext, we need to make sure that the executable runs, so run the following:\n\n\nchmod +x goTorrent\n\n\n\nThis will make the program executable.\n\n\nConnecting the Frontend to the Backend\n\n\nIf you are using a reverse proxy please see \nReverseProxy\n\n\nWe need to connect our react frontend to our Golang backend, for this we only need to edit one JS file.\n\n\nnano public/static/js/kickwebsocket-generated.js\n\nvar ws = new WebSocket(\"ws://192.168.1.141:8000/websocket\"); //creating websocket\n\n\n\nJust change the IP address after ws:// to your server IP address, and change the port if you changed the port in the \nconfig.toml\n file.\n\n\nThen save that file and return to \n/opt/goTorrent\n.  \n\n\nNow we can test the server.  For testing I recommend going into the \nconfig.toml\n file and changing the \nLogOutput\n to \nstdout\n, and the \nLogLevel\n to \nInfo\n.\n\n\nThen start the server:\n\n\n./goTorrent\n\n\n\nIf you have \nLogLevel\n set to \nInfo\n, you should see the confirmation that the client config has been generated.\n\n\nYou can then open your browser and connect to IP:Port (http) and you should see the main page.  You will see an error for retrieving RSS feeds in stdout, but this is expected for first load.\n\n\nYou can press \nF12\n if using Chrome to open the console and click around the UI to see the logging available for the frontend.\n\n\nRunning goTorrent as a Service\n\n\nIf you are on a linux system that uses systemd, in the \ndist-specific-files\\Linux-systemd\\\n folder there is a \ngoTorrent.service\n file that can be used to setup systemd for goTorrent.  A quick overview of what is needed.\n\n\n\n\nEdit the systemd file to specify your specific implementation\n\n\nCopy the file to your systemd folder, i.e. \n/etc/systemd/system\n\n\nEnable the service \nsystemctl enable goTorrent.service\n\n\n\n\nIf using a new user, create that user and assign permissions:\n\n\na. \nuseradd goTorrent\n\n\nb. \nsudo chown -R goTorrent:goTorrent /opt/goTorrent\n\n\nc. If you want to test server: \nsu goTorrent\n then run the executable\n\n\n\n\n\n\nSet your \nconfig.toml\n file to the values you want.\n\n\n\n\nStart your server: \nsystemctl start goTorrent\n\n\nCheck for errors: \nsystemctl status goTorrent\n.  You can also check \nlogs\\server.log\n.",
            "title": "Linux"
        },
        {
            "location": "/Install/linuxInstall/#configuring-the-backend",
            "text": "Download the latest release from the releases tab, it will be in a tar.gz format.  Create a directory where goTorrent will run from  sudo mkdir /opt/goTorrent  Put the tar.gz release into the folder, and extract it.  tar -zxvf goTorrent_release_64-git.tar.gz  You can then remove the tar.gz if you wish.  You should have something similar to the following files:  drwxr-xr-x 5 root root        9 Jan 21 14:56 .\ndrwxr-xr-x 5 root root        5 Jan 21 14:54 ..\n-rw-rw-rw- 1 root root     1086 Dec  1 01:42 LICENSE\n-rw-rw-rw- 1 root root       69 Dec  1 01:01 README.md\n-rw-rw-rw- 1 root root     4466 Jan 21 03:48 config.toml\ndrwxr-xr-x 3 root root        3 Jan 21 14:55 dist-specific-files\n-rw-rw-rw- 1 root root 12503552 Jan 21 03:53 goTorrent\ndrwxr-xr-x 3 root root        3 Jan 21 14:55 public\ndrwxr-xr-x 2 root root        3 Jan 21 14:55 templates  The  config.toml  file contains all of the settings for the server part of the application.  Most of the important settings are at the top of the file, so open it with your prefered text editor.  [serverConfig]  ServerPort = \":8000\" #leave format as is it expects a string with colon\nServerAddr = \"\" #blank will bind to default IP address, usually fine to leave be\nLogLevel = \"Warn\" # Options = Debug, Info, Warn, Error, Fatal, Panic\nLogOutput = \"file\" #Options = file, stdout #file will print it to logs/server.log\n\nSeedRatioStop = 1.50 #automatically stops the torrent after it reaches this seeding ratio\n#Relative or absolute path accepted, the server will convert any relative path to an absolute path.\nDefaultMoveFolder = 'downloaded' #default path that a finished torrent is symlinked to after completion. Torrents added via RSS will default here\nTorrentWatchFolder = 'torrentUpload' #folder path that is watched for .torrent files and adds them automatically every 5 minutes\n\n#Limits your upload and download speed globally, all are averages and not burst protected (usually burst on start).\n#Low = ~.05MB/s, Medium = ~.5MB/s, High = ~1.5MB/s\nUploadRateLimit = \"Unlimited\"  #Options are \"Low\", \"Medium\", \"High\", \"Unlimited\" #Unlimited is default\nDownloadRateLimit = \"Unlimited\"  [notifications]  PushBulletToken = \"\" #add your pushbullet api token here to notify of torrent completion to pushbullet  Usually you don't need to change anything in this file, goTorrent will use your default IP address and bind to it.  You can change the port if you wish.  Next, we need to make sure that the executable runs, so run the following:  chmod +x goTorrent  This will make the program executable.",
            "title": "Configuring the backend"
        },
        {
            "location": "/Install/linuxInstall/#connecting-the-frontend-to-the-backend",
            "text": "If you are using a reverse proxy please see  ReverseProxy  We need to connect our react frontend to our Golang backend, for this we only need to edit one JS file.  nano public/static/js/kickwebsocket-generated.js\n\nvar ws = new WebSocket(\"ws://192.168.1.141:8000/websocket\"); //creating websocket  Just change the IP address after ws:// to your server IP address, and change the port if you changed the port in the  config.toml  file.  Then save that file and return to  /opt/goTorrent .    Now we can test the server.  For testing I recommend going into the  config.toml  file and changing the  LogOutput  to  stdout , and the  LogLevel  to  Info .  Then start the server:  ./goTorrent  If you have  LogLevel  set to  Info , you should see the confirmation that the client config has been generated.  You can then open your browser and connect to IP:Port (http) and you should see the main page.  You will see an error for retrieving RSS feeds in stdout, but this is expected for first load.  You can press  F12  if using Chrome to open the console and click around the UI to see the logging available for the frontend.",
            "title": "Connecting the Frontend to the Backend"
        },
        {
            "location": "/Install/linuxInstall/#running-gotorrent-as-a-service",
            "text": "If you are on a linux system that uses systemd, in the  dist-specific-files\\Linux-systemd\\  folder there is a  goTorrent.service  file that can be used to setup systemd for goTorrent.  A quick overview of what is needed.   Edit the systemd file to specify your specific implementation  Copy the file to your systemd folder, i.e.  /etc/systemd/system  Enable the service  systemctl enable goTorrent.service   If using a new user, create that user and assign permissions:  a.  useradd goTorrent  b.  sudo chown -R goTorrent:goTorrent /opt/goTorrent  c. If you want to test server:  su goTorrent  then run the executable    Set your  config.toml  file to the values you want.   Start your server:  systemctl start goTorrent  Check for errors:  systemctl status goTorrent .  You can also check  logs\\server.log .",
            "title": "Running goTorrent as a Service"
        },
        {
            "location": "/Install/otherInstall/",
            "text": "Windows\n\n\nI hope to update this with more information at a later date... for now:\n\n\nPlease see the linux instructions as they are similar, for running it as a service I havn't tried out any of the programs that claim to do that, but perhaps try \nNSSM\n\n\nMacOS\n\n\nI will accept contributions to the docs for this as I do not own a Mac",
            "title": "Other"
        },
        {
            "location": "/Install/otherInstall/#windows",
            "text": "I hope to update this with more information at a later date... for now:  Please see the linux instructions as they are similar, for running it as a service I havn't tried out any of the programs that claim to do that, but perhaps try  NSSM",
            "title": "Windows"
        },
        {
            "location": "/Install/otherInstall/#macos",
            "text": "I will accept contributions to the docs for this as I do not own a Mac",
            "title": "MacOS"
        },
        {
            "location": "/Install/reverseproxy/",
            "text": "Reverse Proxy\n\n\ngoTorrent supports reverse proxy behind something like Nginx or Apache\n\n\nTo enable reverse Proxy set \nProxyEnabled\n to true in \nconfig.toml\n, then input the correct \nBaseURL\n and start the server.\n\n\nIf you use a reverse proxy, add of the information for the frontend should be configured automatically, so you shouldn't have to make any changes to \nkickstart-generated.js\n.\n\n\nSSL\n\n\nIt is assumed that the reverse proxy is behind SSL.. if not then you may need to change the \nkickstart-generated.js\n from \nwss\n to \nws\n.",
            "title": "Reverse Proxy"
        },
        {
            "location": "/Install/reverseproxy/#reverse-proxy",
            "text": "goTorrent supports reverse proxy behind something like Nginx or Apache  To enable reverse Proxy set  ProxyEnabled  to true in  config.toml , then input the correct  BaseURL  and start the server.  If you use a reverse proxy, add of the information for the frontend should be configured automatically, so you shouldn't have to make any changes to  kickstart-generated.js .",
            "title": "Reverse Proxy"
        },
        {
            "location": "/Install/reverseproxy/#ssl",
            "text": "It is assumed that the reverse proxy is behind SSL.. if not then you may need to change the  kickstart-generated.js  from  wss  to  ws .",
            "title": "SSL"
        },
        {
            "location": "/API/api/",
            "text": "Message structure\n\n\nNote!  The API is mostly complete but breaking changes may still occur!\n\n\nAll messages from the client to server must follow this basic JSON structure:\n\n\nMessageType: \"authRequest\", //String of type of message\nPayload: {\"ClientAuthString\": ClientAuthString, \"ClientString2\": ClientPassword} \n//Payload is a JSON object with a variable number of Key/Values depending on the type of message you are sending\n//The only part that must match exactly is obviously the key, the value is just in the examples for context\n\n\n\nAll clients are required to authenticate to the server via a provided token provided by the server (on first run of the server it generates one automatically), for subsequent key generation the user can generate them from the settings panel.\n\n\nAll messages are caps sensitive.\n\n\nThe first message that the client sends to the server MUST be an \"authRequest\" message.\n\n\nNote: I am using the Golang representation of arrays in the docs, so \"[]string\" means an array of strings.",
            "title": "General API Information"
        },
        {
            "location": "/API/api/#message-structure",
            "text": "Note!  The API is mostly complete but breaking changes may still occur!  All messages from the client to server must follow this basic JSON structure:  MessageType: \"authRequest\", //String of type of message\nPayload: {\"ClientAuthString\": ClientAuthString, \"ClientString2\": ClientPassword} \n//Payload is a JSON object with a variable number of Key/Values depending on the type of message you are sending\n//The only part that must match exactly is obviously the key, the value is just in the examples for context  All clients are required to authenticate to the server via a provided token provided by the server (on first run of the server it generates one automatically), for subsequent key generation the user can generate them from the settings panel.  All messages are caps sensitive.  The first message that the client sends to the server MUST be an \"authRequest\" message.  Note: I am using the Golang representation of arrays in the docs, so \"[]string\" means an array of strings.",
            "title": "Message structure"
        },
        {
            "location": "/API/clientToServer/",
            "text": "authRequest\n\n\nMessageType: \"authRequest\"\nPayload: {\"ClientAuthString\": ClientAuthString}\n\n\n\nRequired Payload\n: \"ClientAuthString\" //Must be in this EXACT format\n\n\nExpects\n: \nString\n containing a signed token from the server\n\n\nExample Payload\n: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnROYW1lIjoiZ29Ub3JyZW50V2ViVUkiLC\nJpc3MiOiJnb1RvcnJlbnRTZXJ2ZXIifQ.zvNAeunNp4DTICaY-SrbVRAoekLGkzQ51SfwkjhZnZY\"\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: Nothing, will now allow other commands if authentication succeeds.\n\n\nNotes\n: The \"authRequest\" MUST be the first message sent to the server before it will accept any other messages\n\n\nnewAuthToken\n\n\nMessageType: \"newAuthToken\"\nPayload: {\"ClientName\": ClientName}\n\n\n\nRequired Payload\n: \"ClientName\" //Must be in this EXACT format\n\n\nExpects\n: \nString\n containing a string with the client name (up to the user to define)\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \ntokenReturn\n\n\nNotes\n: \n\n\ntorrentListRequest\n\n\nFetches all of the torrents currently stored in the client\n\n\nMessageType: \"torrentListRequest\"\n\n\n\nRequired Payload\n: NONE\n\n\nExpects\n: Only a MessageType of \"torrentListRequest\", nothing else\n\n\nReturns\n: \ntorrentList\n\n\ntorrentFileListRequest\n\n\nFetches a list of files for a single torrent\n\n\nMessageType: \"torrentFileListRequest\",\nPayload: {\"FileListHash\": selectionHash}\n\n\n\nRequired Payload\n: \"FileListHash\"\n\n\nExpects\n: \nstring\n The hash of the torrent file we are requesting the files for\n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: []torrentFileList //Array of torrent file structs  \ntorrentFileList\n\n\nNotes\n:\n\n\ntorrentPeerListRequest\n\n\nFetches a list of current peers for a single torrent\n\n\nMessageType: \"torrentPeerListRequest\",\nPayload: {\"PeerListHash\": selectionHash}\n\n\n\nRequired Payload\n: \"PeerListHash\" \n\n\nExpects\n: \nstring\n The hash of the torrent file we are requesting the peers for\n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \ntorrentPeerList\n\n\nNotes\n: This API call will most likely change heavily in the future!\n\n\nfetchTorrentsByLabel\n\n\nFetches a list of torrents by their label\n\n\nMessageType: \"torrentPeerListRequest\",\nPayload: {\"Label\": searchLabel}\n\n\n\nRequired Payload\n: \"Label\"\n\n\nExpects\n: \nstring\n The label string that you want to search for\n\n\nExample\n: {\"Label\" : \"RSS\"} //Will search the database for torrents with RSS label\n\n\nOptional Payload\n: NONE\n\n\nReturns\n:  \ntorrentList\n  //Filtered by label\n\n\nNotes\n: API does not support an array of labels to search for\n\n\nchangeStorageValue\n\n\nChanges where the finished torrent will be stored.\n\n\nMessageType: \"changeStorageValue\",\nPayload: {\"ChangeStorageHashes\": [selectionHashes], \"StorageValue\": storageValue} //the selection hashes and new store value\n\n\n\nRequired\n: \"ChangeStorageHashes\", \"StorageValue\"\n\n\nExpects\n: \n\n\n\"ChangeStorageHashes\" -> \n[]string\n //array of strings containing the hash values for the selected torrents\n\n\n\"StorageValue\" -> \nstring\n //the absolute or relative path to the new storage location (server will convert to absolute path on upload\n\n\nExample\n: , \"C:\\Users\\Test\\Desktop\"\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \n\n\nNotes\n:\n\n\nmagnetLinkSubmit\n\n\nSubmits a magnet link (or links) to the server to add the torrent\n\n\nMessageType: \"magnetLinkSubmit\",\nPayload: {\"MagnetLinks\": [magnetLinks], \"StorageValue\": storageValue, \"Label\": userLabel}\n\n\n\nRequired\n: \"MagnetLinks\"\n\n\nExpects\n: \"MagnetLinks\" -> \n[]string\n // Expects an array of magnet links\n\n\nExample\n: [magnet...] //magnet links must start with magnet\n\n\nOptional Payload\n: \"StorageValue\" -> \nstring\n //absolute or relative path, will be converted to absolute path on server\n\n\n\"Label\" -> \nstring\n //String containing the requested label to be attached to the torrent\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n: MUST be an array even for single magnetlink\n\n\ntorrentFileSubmit\n\n\nSubmits a torrent file to the server to add the torrent\n\n\nMessageType: \"torrentFileSubmit\",\nPayload: {\"FileData\": base64data, \"FileName\": filename, \"StorageValue\": storageValue, \"Label\": userLabel}\n\n\n\nRequired\n: \"FileData\", \"FileName\"\n\n\nExpects\n: \"FileData\" -> \nBase64 encoded string\n //The file must be converted a base64 encoded string and streamed to the server in this way.  PLEASE SEE NOTES\n\n\n\"FileName\" -> \nstring\n //Full name of the file INCLUDING the \".torrent\" extension\n\n\nExample\n: \n\n\nOptional Payload\n: \"StorageValue\" -> \nstring\n //absolute or relative path, will be converted to absolute path on server\n\n\n\"Label\" -> \nstring\n //String containing the requested label to be attached to the torrent\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n: The way Chrome and Firefox JS implementations encode base64 appears to be different... \nif you are doing your base64 encoding I encourage it to be in this format: \"base64,\" THEN your base64 data, since the server will split the response by the comma position and throw away the first part.  \n\n\nIf the comma is not there the server will reject the submission.\n\n\nstartTorrents\n\n\nStops the selected torrents on the server\n\n\nMessageType: \"startTorrents\",\nPayload: {\"TorrentHashes\": [selectionHashes] }\n\n\n\nRequired\n: \"TorrentHashes\"\n\n\nExpects\n: \"TorrentHashes\" -> \n[]string\n //Array of torrent hashes \n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\nstopTorrents\n\n\nStops the selected torrents on the server\n\n\nMessageType: \"stopTorrents\",\nPayload: {\"TorrentHashes\": [selectionHashes] }\n\n\n\nRequired\n: \"TorrentHashes\"\n\n\nExpects\n: \"TorrentHashes\" -> \n[]string\n //Array of torrent hashes \n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\ndeleteTorrents\n\n\nDeletes the submitted torrents (and has the option to delete the downloaded data as well as the torrent)\n\n\n MessageType: \"deleteTorrents\",\n Payload: {\"TorrentHashes\": [selectionHashes], \"WithData\": withData }\n\n\n\nRequired\n: \"TorrentHashes\", \"WithData\"\n\n\nExpects\n: \"TorrentHashes\" -> \n[]string\n //Array of torrent hashes\n\n\n\"WithData\" -> \nbool\n // True to delete the downloaded data as well, false to just delete the torrent from the client\n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\nforceUploadTorrents\n\n\nStops the selected torrents on the server\n\n\n MessageType: \"forceUploadTorrents\",\n Payload: {\"TorrentHashes\": [selectionHashes] }\n\n\n\nRequired\n: \"TorrentHashes\"\n\n\nExpects\n: \"TorrentHashes\" -> \n[]string\n //Array of torrent hashes \n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\nsetFilePriority\n\n\nSets the file priority for the selected files for the selected torrent\n\n\nMessageType: \"setFilePriority\",\nPayload: {\"TorrentHash\": torrentHash, \"FilePriority\": filePriority, \"FilePaths\": [filePaths]}\n\n\n\nRequired\n: \"TorrentHash\", \"FilePriority\", \"FilePaths\"\n\n\nExpects\n: \"TorrentHash\" -> \nstring\n //String of a single torrent hash\n\n\n\"FilePriority\" -> \nstring\n \"High\"/\"Normal\"/\"Cancel\" //Tells the server what priority to set the selected files at\n\n\n\"FilePaths\" -> \n[]string\n //Contains the relative filepath for the files that need a priority change (used to match the files on the server)\n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n: \"FilePaths\" can be determined by querying the sever for torrentFileListRequest\n\n\nsettingsFileRequest\n\n\nReturns the settings for the server\n\n\nMessageType: \"settingsFileRequest\",\n\n\n\nRequired\n: None\n\n\nExample\n: \n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \nsettingsFile\n\n\nNotes\n:\n\n\nrssFeedRequest\n\n\nReturns the total number of feeds and the URL's for your RSS feeds\n\n\n MessageType: \"rssFeedRequest\",\n\n\n\nRequired\n: Just the MessageType\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \nrssList\n\n\nNotes\n:\n\n\naddRSSFeed\n\n\nAdds an RSS feed to the database\n\n\nMessageType: \"addRSSFeed\",\nPayload: {\"RSSURL\": rssURL}\n\n\n\nRequired\n: \"RSSURL\"\n\n\nExpects\n: \nstring\n //containing a full RSS URL\n\n\nExample\n: Any URL that provides magnet links in the \"Link\" field will work\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\ndeleteRSSFeed\n\n\nDeletes an RSS feed from the database\n\n\n  MessageType: \"deleteRSSFeed\",\n  Payload: {\"RSSURL\": rssURL}\n\n\n\nRequired\n: \"RSSURL\"\n\n\nExpects\n: \nstring\n //containing a full RSS URL\n\n\nExample\n: Any RSS URL already in the database\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: serverPushMessage\n\n\nNotes\n:\n\n\nrssTorrentsRequest\n\n\nFetches all of the found magnet links in an RSS feed\n\n\n  MessageType: \"rssTorrentsRequest\",\n  Payload: {\"RSSURL\": rssURL}\n\n\n\nRequired\n: \n\n\nExpects\n: \nstring\n //containing a full RSS URL\n\n\nExample\n: Any RSS URL that is already in the database\n\n\nOptional Payload\n: NONE\n\n\nReturns\n: \nrssTorrentList\n\n\nNotes\n:",
            "title": "Client to Server Messages"
        },
        {
            "location": "/API/clientToServer/#authrequest",
            "text": "MessageType: \"authRequest\"\nPayload: {\"ClientAuthString\": ClientAuthString}  Required Payload : \"ClientAuthString\" //Must be in this EXACT format  Expects :  String  containing a signed token from the server  Example Payload : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnROYW1lIjoiZ29Ub3JyZW50V2ViVUkiLC\nJpc3MiOiJnb1RvcnJlbnRTZXJ2ZXIifQ.zvNAeunNp4DTICaY-SrbVRAoekLGkzQ51SfwkjhZnZY\"  Optional Payload : NONE  Returns : Nothing, will now allow other commands if authentication succeeds.  Notes : The \"authRequest\" MUST be the first message sent to the server before it will accept any other messages",
            "title": "authRequest"
        },
        {
            "location": "/API/clientToServer/#newauthtoken",
            "text": "MessageType: \"newAuthToken\"\nPayload: {\"ClientName\": ClientName}  Required Payload : \"ClientName\" //Must be in this EXACT format  Expects :  String  containing a string with the client name (up to the user to define)  Optional Payload : NONE  Returns :  tokenReturn  Notes :",
            "title": "newAuthToken"
        },
        {
            "location": "/API/clientToServer/#torrentlistrequest",
            "text": "Fetches all of the torrents currently stored in the client  MessageType: \"torrentListRequest\"  Required Payload : NONE  Expects : Only a MessageType of \"torrentListRequest\", nothing else  Returns :  torrentList",
            "title": "torrentListRequest"
        },
        {
            "location": "/API/clientToServer/#torrentfilelistrequest",
            "text": "Fetches a list of files for a single torrent  MessageType: \"torrentFileListRequest\",\nPayload: {\"FileListHash\": selectionHash}  Required Payload : \"FileListHash\"  Expects :  string  The hash of the torrent file we are requesting the files for  Example :   Optional Payload : NONE  Returns : []torrentFileList //Array of torrent file structs   torrentFileList  Notes :",
            "title": "torrentFileListRequest"
        },
        {
            "location": "/API/clientToServer/#torrentpeerlistrequest",
            "text": "Fetches a list of current peers for a single torrent  MessageType: \"torrentPeerListRequest\",\nPayload: {\"PeerListHash\": selectionHash}  Required Payload : \"PeerListHash\"   Expects :  string  The hash of the torrent file we are requesting the peers for  Example :   Optional Payload : NONE  Returns :  torrentPeerList  Notes : This API call will most likely change heavily in the future!",
            "title": "torrentPeerListRequest"
        },
        {
            "location": "/API/clientToServer/#fetchtorrentsbylabel",
            "text": "Fetches a list of torrents by their label  MessageType: \"torrentPeerListRequest\",\nPayload: {\"Label\": searchLabel}  Required Payload : \"Label\"  Expects :  string  The label string that you want to search for  Example : {\"Label\" : \"RSS\"} //Will search the database for torrents with RSS label  Optional Payload : NONE  Returns :   torrentList   //Filtered by label  Notes : API does not support an array of labels to search for",
            "title": "fetchTorrentsByLabel"
        },
        {
            "location": "/API/clientToServer/#changestoragevalue",
            "text": "Changes where the finished torrent will be stored.  MessageType: \"changeStorageValue\",\nPayload: {\"ChangeStorageHashes\": [selectionHashes], \"StorageValue\": storageValue} //the selection hashes and new store value  Required : \"ChangeStorageHashes\", \"StorageValue\"  Expects :   \"ChangeStorageHashes\" ->  []string  //array of strings containing the hash values for the selected torrents  \"StorageValue\" ->  string  //the absolute or relative path to the new storage location (server will convert to absolute path on upload  Example : , \"C:\\Users\\Test\\Desktop\"  Optional Payload : NONE  Returns :   Notes :",
            "title": "changeStorageValue"
        },
        {
            "location": "/API/clientToServer/#magnetlinksubmit",
            "text": "Submits a magnet link (or links) to the server to add the torrent  MessageType: \"magnetLinkSubmit\",\nPayload: {\"MagnetLinks\": [magnetLinks], \"StorageValue\": storageValue, \"Label\": userLabel}  Required : \"MagnetLinks\"  Expects : \"MagnetLinks\" ->  []string  // Expects an array of magnet links  Example : [magnet...] //magnet links must start with magnet  Optional Payload : \"StorageValue\" ->  string  //absolute or relative path, will be converted to absolute path on server  \"Label\" ->  string  //String containing the requested label to be attached to the torrent  Returns : serverPushMessage  Notes : MUST be an array even for single magnetlink",
            "title": "magnetLinkSubmit"
        },
        {
            "location": "/API/clientToServer/#torrentfilesubmit",
            "text": "Submits a torrent file to the server to add the torrent  MessageType: \"torrentFileSubmit\",\nPayload: {\"FileData\": base64data, \"FileName\": filename, \"StorageValue\": storageValue, \"Label\": userLabel}  Required : \"FileData\", \"FileName\"  Expects : \"FileData\" ->  Base64 encoded string  //The file must be converted a base64 encoded string and streamed to the server in this way.  PLEASE SEE NOTES  \"FileName\" ->  string  //Full name of the file INCLUDING the \".torrent\" extension  Example :   Optional Payload : \"StorageValue\" ->  string  //absolute or relative path, will be converted to absolute path on server  \"Label\" ->  string  //String containing the requested label to be attached to the torrent  Returns : serverPushMessage  Notes : The way Chrome and Firefox JS implementations encode base64 appears to be different... \nif you are doing your base64 encoding I encourage it to be in this format: \"base64,\" THEN your base64 data, since the server will split the response by the comma position and throw away the first part.    If the comma is not there the server will reject the submission.",
            "title": "torrentFileSubmit"
        },
        {
            "location": "/API/clientToServer/#starttorrents",
            "text": "Stops the selected torrents on the server  MessageType: \"startTorrents\",\nPayload: {\"TorrentHashes\": [selectionHashes] }  Required : \"TorrentHashes\"  Expects : \"TorrentHashes\" ->  []string  //Array of torrent hashes   Example :   Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "startTorrents"
        },
        {
            "location": "/API/clientToServer/#stoptorrents",
            "text": "Stops the selected torrents on the server  MessageType: \"stopTorrents\",\nPayload: {\"TorrentHashes\": [selectionHashes] }  Required : \"TorrentHashes\"  Expects : \"TorrentHashes\" ->  []string  //Array of torrent hashes   Example :   Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "stopTorrents"
        },
        {
            "location": "/API/clientToServer/#deletetorrents",
            "text": "Deletes the submitted torrents (and has the option to delete the downloaded data as well as the torrent)   MessageType: \"deleteTorrents\",\n Payload: {\"TorrentHashes\": [selectionHashes], \"WithData\": withData }  Required : \"TorrentHashes\", \"WithData\"  Expects : \"TorrentHashes\" ->  []string  //Array of torrent hashes  \"WithData\" ->  bool  // True to delete the downloaded data as well, false to just delete the torrent from the client  Example :   Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "deleteTorrents"
        },
        {
            "location": "/API/clientToServer/#forceuploadtorrents",
            "text": "Stops the selected torrents on the server   MessageType: \"forceUploadTorrents\",\n Payload: {\"TorrentHashes\": [selectionHashes] }  Required : \"TorrentHashes\"  Expects : \"TorrentHashes\" ->  []string  //Array of torrent hashes   Example :   Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "forceUploadTorrents"
        },
        {
            "location": "/API/clientToServer/#setfilepriority",
            "text": "Sets the file priority for the selected files for the selected torrent  MessageType: \"setFilePriority\",\nPayload: {\"TorrentHash\": torrentHash, \"FilePriority\": filePriority, \"FilePaths\": [filePaths]}  Required : \"TorrentHash\", \"FilePriority\", \"FilePaths\"  Expects : \"TorrentHash\" ->  string  //String of a single torrent hash  \"FilePriority\" ->  string  \"High\"/\"Normal\"/\"Cancel\" //Tells the server what priority to set the selected files at  \"FilePaths\" ->  []string  //Contains the relative filepath for the files that need a priority change (used to match the files on the server)  Example :   Optional Payload : NONE  Returns : serverPushMessage  Notes : \"FilePaths\" can be determined by querying the sever for torrentFileListRequest",
            "title": "setFilePriority"
        },
        {
            "location": "/API/clientToServer/#settingsfilerequest",
            "text": "Returns the settings for the server  MessageType: \"settingsFileRequest\",  Required : None  Example :   Optional Payload : NONE  Returns :  settingsFile  Notes :",
            "title": "settingsFileRequest"
        },
        {
            "location": "/API/clientToServer/#rssfeedrequest",
            "text": "Returns the total number of feeds and the URL's for your RSS feeds   MessageType: \"rssFeedRequest\",  Required : Just the MessageType  Optional Payload : NONE  Returns :  rssList  Notes :",
            "title": "rssFeedRequest"
        },
        {
            "location": "/API/clientToServer/#addrssfeed",
            "text": "Adds an RSS feed to the database  MessageType: \"addRSSFeed\",\nPayload: {\"RSSURL\": rssURL}  Required : \"RSSURL\"  Expects :  string  //containing a full RSS URL  Example : Any URL that provides magnet links in the \"Link\" field will work  Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "addRSSFeed"
        },
        {
            "location": "/API/clientToServer/#deleterssfeed",
            "text": "Deletes an RSS feed from the database    MessageType: \"deleteRSSFeed\",\n  Payload: {\"RSSURL\": rssURL}  Required : \"RSSURL\"  Expects :  string  //containing a full RSS URL  Example : Any RSS URL already in the database  Optional Payload : NONE  Returns : serverPushMessage  Notes :",
            "title": "deleteRSSFeed"
        },
        {
            "location": "/API/clientToServer/#rsstorrentsrequest",
            "text": "Fetches all of the found magnet links in an RSS feed    MessageType: \"rssTorrentsRequest\",\n  Payload: {\"RSSURL\": rssURL}  Required :   Expects :  string  //containing a full RSS URL  Example : Any RSS URL that is already in the database  Optional Payload : NONE  Returns :  rssTorrentList  Notes :",
            "title": "rssTorrentsRequest"
        },
        {
            "location": "/API/serverToClient/",
            "text": "TokenReturn\n\n\nMessageType\n: \"TokenReturn\"\n\n\nTokenReturn\n: \nstring\n   //Contains the JWT token for new clients, only returned once, not stored in server\n\n\ntorrentList\n\n\nMessageType\n: \"torrentList\"\n\n\ntotal\n: \nint\n //Integer containing the total number of torrents in the server\n\n\ndata\n: \narray\n //Array containing individual torrent stats (torrentListArray)\n\n\ndata Struct\n\n\n\n\n\n\n\n\ndata Array\n\n\nData Type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nTorrentHashString\n\n\nstring\n\n\n//Passed to client for displaying hash and is used to uniquly identify all torrents\n\n\n\n\n\n\nTorrentName\n\n\nstring\n\n\n//String of the name of the torrent\n\n\n\n\n\n\nDownloadedSize\n\n\nstring\n\n\n//how much the client has downloaded total\n\n\n\n\n\n\nSize\n\n\nstring\n\n\n//total size of the torrent\n\n\n\n\n\n\nDownloadSpeed\n\n\nstring\n\n\n//the dl speed of the torrent\n\n\n\n\n\n\nStatus\n\n\nstring\n\n\n//Whether the torrent is stopped, running, seeding etc\n\n\n\n\n\n\nPercentDone\n\n\nstring\n\n\n//Passed to client to show percent done\n\n\n\n\n\n\nActivePeers\n\n\nstring\n\n\n//Active peers that uploading/downloading\n\n\n\n\n\n\nUploadSpeed\n\n\nstring\n\n\n//passed to client to show Uploadspeed\n\n\n\n\n\n\nStoragePath\n\n\nstring\n\n\n//Where the torrent Data will be stored after download\n\n\n\n\n\n\nDateAdded\n\n\nstring\n\n\n//Passed to client (and stored in stormdb)\n\n\n\n\n\n\nETA\n\n\nstring\n\n\n//ETA for the torrent\n\n\n\n\n\n\nTorrentLabel\n\n\nstring\n\n\n//user provided label for the torrent\n\n\n\n\n\n\nSourceType\n\n\nstring\n\n\n//Stores whether the torrent came from a torrent file or a magnet link\n\n\n\n\n\n\nKnownSwarm\n\n\n[]torrent.Peer\n\n\n//array of peers\n\n\n\n\n\n\nUploadRatio\n\n\nstring\n\n\n//what the download to upload ratio is for the torrent\n\n\n\n\n\n\nTotalUploadedSize\n\n\nstring\n\n\n//Humanized version of TotalUploadedBytes to pass to the client\n\n\n\n\n\n\nTotalUploadedBytes\n\n\nint64\n\n\n//includes bytes that happened before reboot (from stormdb)\n\n\n\n\n\n\nNumberofFiles\n\n\nint\n\n\n//Number of files in the torrent\n\n\n\n\n\n\nNumberofPieces\n\n\nint\n\n\n//Total number of pieces in the torrent (Not currently used)\n\n\n\n\n\n\nMaxConnections\n\n\nint\n\n\n//Used to stop the torrent by limiting the max allowed connections\n\n\n\n\n\n\n\n\ntorrentFileList\n\n\nMessageType\n: \"torrentFileList\"\n\n\nTotalFiles\n: \nint\n //Integer containing the total number of files in the torrent\n\n\nFileList\n: \narray\n //TorrentFile Struct // Array containing individual torrent files\n\n\n\n\n\n\n\n\nFileList array\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nTorrentHashString\n\n\nstring\n\n\n//Used to tie the file to a torrent //TODO not sure if needed\n\n\n\n\n\n\nFileName\n\n\nstring\n\n\n//The name of the file\n\n\n\n\n\n\nFilePath\n\n\nstring\n\n\n//The relative filepath to the file\n\n\n\n\n\n\nFileSize\n\n\nstring\n\n\n//Humanized file size display\n\n\n\n\n\n\nFilePercent\n\n\nstring\n\n\n//String value of percent of individual file percent done\n\n\n\n\n\n\nFilePriority\n\n\nstring\n\n\n//Currently \"High\", \"Normal\", or \"Cancel\"\n\n\n\n\n\n\n\n\ntorrentPeerList\n\n\nMessageType\n: \"torrentPeerList\"\n\n\nTotalPeers\n: \nint\n //Integer containing the total number of peers in the torrent\n\n\nPeerList\n: \n[]Peer\n //Peer Struct // Array containing individual torrent files\n\n\nWARN: This will likely change in the future\n\n\n\n\n\n\n\n\nPeer Struct\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nID\n\n\n[]byte\n\n\n//TODO, plan on converting this to strings before sending\n\n\n\n\n\n\nIP\n\n\n[]byte\n\n\n\n\n\n\n\n\nPort\n\n\nint\n\n\n//Port the peer is running on\n\n\n\n\n\n\nSource\n\n\nstring\n\n\n//Will convert to a meaningful string at some point\n\n\n\n\n\n\nSupportsEncryption\n\n\nbool\n\n\n//Does the client support encyrption\n\n\n\n\n\n\n\n\nrssList\n\n\nMessageType\n: \"rssList\"\n\n\nTotalRSSFeeds\n: \nint\n //Integer containing the total number of RSS Feeds in the database\n\n\nRSSFeeds\n: \n[]RSSFeedsNames\n //RSSFeedsNames Struct // Array containing RSS Feed \"Name\" and \"URL\"\n\n\n\n\n\n\n\n\nRSSFeedsNames\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nRSSName\n\n\nstring\n\n\n// Name is pulled from the RSS Name field\n\n\n\n\n\n\nRSSFeedURL\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nrssTorrentList\n\n\nMessageType\n: \"rssTorrentList\"\n\n\nURL\n: \nstring\n //URL of the RSS feed \n\n\nName\n: \nstring\n //Name of the RSS feed, as extracted from the feed\n\n\nTotalTorrents\n: \nint\n //Integer containing the total number of torrents in the feed\n\n\nTorrents\n: \n[]SingleRSSTorrent\n //SingleRSSTorrent Struct // Array containing RSS Feed \"Name\" and \"URL\"\n\n\n\n\n\n\n\n\nSingleRSSTorrent\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nLink\n\n\nstring\n\n\n//Link field should contain the magnet link for the torrent\n\n\n\n\n\n\nTitle\n\n\nstring\n\n\n//Title field also pulled from the RSS Feed\n\n\n\n\n\n\nPubDate\n\n\nstring\n\n\n//Date the torrent was published to the feed\n\n\n\n\n\n\n\n\nsettingsFile\n\n\nMessageType\n: \"settingsFile\"\n\n\nConfig\n: \nFullClientSettings\n //\n\n\n\n\n\n\n\n\nFullClientSettings\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nID\n\n\nint\n\n\n//unique database ID\n\n\n\n\n\n\nLoggingLevel\n\n\nint\n\n\n//What logging level we are running at\n\n\n\n\n\n\nLoggingOutput\n\n\nstring\n\n\n//Whether we are outputting to stdout or to a file\n\n\n\n\n\n\nVersion\n\n\nint\n\n\n//what version of the software we are running (currently not used)\n\n\n\n\n\n\nTFileUploadFolder\n\n\nstring\n\n\n//Uploaded Torrent files from the client will be stored in this folder\n\n\n\n\n\n\nSeedRatioStop\n\n\nfloat64\n\n\n//At what ratio to automatically stop seeding a torrent\n\n\n\n\n\n\nDefaultMoveFolder\n\n\nstring\n\n\n//Full path w\n\n\n\n\n\n\nTorrentWatchFolder\n\n\nstring\n\n\n//Full path of the folder that is watched every 5 minutes for torrent files to add\n\n\n\n\n\n\nClientConnectSettings\n\n\nstruct\n\n\n//At what ratio to automatically stop seeding a torrent\n\n\n\n\n\n\n\n\nclientConnectSettings\n\n\nEmbedded Struct in settingsFile\n\n\n\n\n\n\n\n\nclientConnectSettings\n\n\ndata type\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nHTTPAddr\n\n\nstring\n\n\n//HTTP Port with colon\n\n\n\n\n\n\nHTTPAddrIP\n\n\nstring\n\n\n//HTTP IP address that the client connects at\n\n\n\n\n\n\nUseProxy\n\n\nbool\n\n\n//Whether or not we are using a reverse Proxy (like nginx or apache)\n\n\n\n\n\n\nWebsocketClientPort\n\n\nint\n\n\n//HTTPAddr with the colon stripped off\n\n\n\n\n\n\nBaseURL\n\n\nstring\n\n\n//Full URL to the your goTorrent server (used with proxy) \"derajnet.duckdns.org/gopher/\"\n\n\n\n\n\n\nClientUsername\n\n\nstring\n\n\n//the username for the client login\n\n\n\n\n\n\nClientPassword\n\n\nstring\n\n\n//the SHA256 hash string of the password",
            "title": "Server to Client Messages"
        },
        {
            "location": "/API/serverToClient/#tokenreturn",
            "text": "MessageType : \"TokenReturn\"  TokenReturn :  string    //Contains the JWT token for new clients, only returned once, not stored in server",
            "title": "TokenReturn"
        },
        {
            "location": "/API/serverToClient/#torrentlist",
            "text": "MessageType : \"torrentList\"  total :  int  //Integer containing the total number of torrents in the server  data :  array  //Array containing individual torrent stats (torrentListArray)  data Struct     data Array  Data Type  Notes      TorrentHashString  string  //Passed to client for displaying hash and is used to uniquly identify all torrents    TorrentName  string  //String of the name of the torrent    DownloadedSize  string  //how much the client has downloaded total    Size  string  //total size of the torrent    DownloadSpeed  string  //the dl speed of the torrent    Status  string  //Whether the torrent is stopped, running, seeding etc    PercentDone  string  //Passed to client to show percent done    ActivePeers  string  //Active peers that uploading/downloading    UploadSpeed  string  //passed to client to show Uploadspeed    StoragePath  string  //Where the torrent Data will be stored after download    DateAdded  string  //Passed to client (and stored in stormdb)    ETA  string  //ETA for the torrent    TorrentLabel  string  //user provided label for the torrent    SourceType  string  //Stores whether the torrent came from a torrent file or a magnet link    KnownSwarm  []torrent.Peer  //array of peers    UploadRatio  string  //what the download to upload ratio is for the torrent    TotalUploadedSize  string  //Humanized version of TotalUploadedBytes to pass to the client    TotalUploadedBytes  int64  //includes bytes that happened before reboot (from stormdb)    NumberofFiles  int  //Number of files in the torrent    NumberofPieces  int  //Total number of pieces in the torrent (Not currently used)    MaxConnections  int  //Used to stop the torrent by limiting the max allowed connections",
            "title": "torrentList"
        },
        {
            "location": "/API/serverToClient/#torrentfilelist",
            "text": "MessageType : \"torrentFileList\"  TotalFiles :  int  //Integer containing the total number of files in the torrent  FileList :  array  //TorrentFile Struct // Array containing individual torrent files     FileList array  data type  Notes      TorrentHashString  string  //Used to tie the file to a torrent //TODO not sure if needed    FileName  string  //The name of the file    FilePath  string  //The relative filepath to the file    FileSize  string  //Humanized file size display    FilePercent  string  //String value of percent of individual file percent done    FilePriority  string  //Currently \"High\", \"Normal\", or \"Cancel\"",
            "title": "torrentFileList"
        },
        {
            "location": "/API/serverToClient/#torrentpeerlist",
            "text": "MessageType : \"torrentPeerList\"  TotalPeers :  int  //Integer containing the total number of peers in the torrent  PeerList :  []Peer  //Peer Struct // Array containing individual torrent files  WARN: This will likely change in the future     Peer Struct  data type  Notes      ID  []byte  //TODO, plan on converting this to strings before sending    IP  []byte     Port  int  //Port the peer is running on    Source  string  //Will convert to a meaningful string at some point    SupportsEncryption  bool  //Does the client support encyrption",
            "title": "torrentPeerList"
        },
        {
            "location": "/API/serverToClient/#rsslist",
            "text": "MessageType : \"rssList\"  TotalRSSFeeds :  int  //Integer containing the total number of RSS Feeds in the database  RSSFeeds :  []RSSFeedsNames  //RSSFeedsNames Struct // Array containing RSS Feed \"Name\" and \"URL\"     RSSFeedsNames  data type  Notes      RSSName  string  // Name is pulled from the RSS Name field    RSSFeedURL  string",
            "title": "rssList"
        },
        {
            "location": "/API/serverToClient/#rsstorrentlist",
            "text": "MessageType : \"rssTorrentList\"  URL :  string  //URL of the RSS feed   Name :  string  //Name of the RSS feed, as extracted from the feed  TotalTorrents :  int  //Integer containing the total number of torrents in the feed  Torrents :  []SingleRSSTorrent  //SingleRSSTorrent Struct // Array containing RSS Feed \"Name\" and \"URL\"     SingleRSSTorrent  data type  Notes      Link  string  //Link field should contain the magnet link for the torrent    Title  string  //Title field also pulled from the RSS Feed    PubDate  string  //Date the torrent was published to the feed",
            "title": "rssTorrentList"
        },
        {
            "location": "/API/serverToClient/#settingsfile",
            "text": "MessageType : \"settingsFile\"  Config :  FullClientSettings  //     FullClientSettings  data type  Notes      ID  int  //unique database ID    LoggingLevel  int  //What logging level we are running at    LoggingOutput  string  //Whether we are outputting to stdout or to a file    Version  int  //what version of the software we are running (currently not used)    TFileUploadFolder  string  //Uploaded Torrent files from the client will be stored in this folder    SeedRatioStop  float64  //At what ratio to automatically stop seeding a torrent    DefaultMoveFolder  string  //Full path w    TorrentWatchFolder  string  //Full path of the folder that is watched every 5 minutes for torrent files to add    ClientConnectSettings  struct  //At what ratio to automatically stop seeding a torrent",
            "title": "settingsFile"
        },
        {
            "location": "/API/serverToClient/#clientconnectsettings",
            "text": "Embedded Struct in settingsFile     clientConnectSettings  data type  Notes      HTTPAddr  string  //HTTP Port with colon    HTTPAddrIP  string  //HTTP IP address that the client connects at    UseProxy  bool  //Whether or not we are using a reverse Proxy (like nginx or apache)    WebsocketClientPort  int  //HTTPAddr with the colon stripped off    BaseURL  string  //Full URL to the your goTorrent server (used with proxy) \"derajnet.duckdns.org/gopher/\"    ClientUsername  string  //the username for the client login    ClientPassword  string  //the SHA256 hash string of the password",
            "title": "clientConnectSettings"
        }
    ]
}